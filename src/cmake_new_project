#!/bin/bash
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	echo "Usage: $(basename $0) OPTIONS [project_name]

Creates a new C++ project using CMake.

OPTIONS:
	-h --help                show this help	
"
	exit 0
fi

if [ -z "$1" ]; then
	echo "$0 error, missing 1:st argument." >&2
	exit 1
else
	project_name=$1
fi


# Creates the main project CMakeLists.txt file
create_cmakelistsFile(){

	local cmake_str="cmake_minimum_required(VERSION 3.10...3.17)
project($project_name)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

set(CMAKE_MODULE_PATH \${CMAKE_MODULE_PATH} \${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/)
if (NOT MSVC)
	set(CMAKE_CXX_FLAGS \"-std=c++1y\")
	option(Debug \"Set projects to debug mode.\")
	if (Debug)
		set(CMAKE_BUILD_TYPE \"Debug\" CACHE INTERNAL \"Build type.\")
		add_definitions(-D_DEBUG)
	else ()
		set(CMAKE_BUILD_TYPE \"Release\" CACHE INTERNAL \"Build type.\")
	endif ()
endif ()

# add sources sub-directory.
add_subdirectory(${dirs_names[4]})
# add application subdirectory
add_subdirectory(${dirs_names[0]})

# add executable
add_executable(myApp main.cpp)

file(COPY data/. DESTINATION \${CMAKE_CURRENT_BINARY_DIR}) # Copy data to build folder.
"
	printf "$cmake_str" > CMakeLists.txt
}


# Creates a basic main.cpp source file within the src directory
create_maincpp_src(){
	local cpp_str="/**
 *  This is the main.cpp file of the project
 *
 **/

#include <iostream>


int main(int argc, char** argv) 
{
   return 0;
}\n"
	printf "$cpp_str" > "${dirs_names[4]}/main.cpp"
}

main() {
	# array for the directories to be created for the cmake project
	dirs_names=(app cmake docs include src tests)

        echo "Creating sub-directories for the project:"
	echo "----------------------------------------------------------------------------------------------------"
	for i in "${dirs_names[@]}"; do
		echo "creating $i directory"
		mkdir -p $project_name/$i
	done
#	mkdir -p $project_name/{$src_folder,$app_folder,$docu_folder,lib,cmake,cmake/modules,$include_folder}
	echo "done"
	
	echo "----------------------------------------------------------------------------------------------------"

	cd $project_name

	echo "added CMakeLists file to the project"
	create_cmakelistsFile
	echo "----------------------------------------------------------------------------------------------------"
	
	create_maincpp_src
	
	cd -
	echo "done"
}

main $@
